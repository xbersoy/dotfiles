{{- if (and (eq .chezmoi.os "linux") (eq .chezmoi.osRelease.name "Pop!_OS")) -}}
#!/bin/bash

set -e

# ****************************************************************************
# *                                 Cleanup                                  *
# ****************************************************************************

function wait_for_apt() {
  while sudo fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do
    sleep 1
  done
}

function remove_flatpak() {
  {{ if .dependencies.flatpak }}
  true
  {{ else }}
  command -v flatpak &>/dev/null || return 0
  flatpak uninstall --all
  wait_for_apt && sudo apt -y purge --autoremove flatpak
  rm -rf "{{- .chezmoi.homeDir -}}/.local/share/flatpak"
  {{ end }}
}

function remove_default_packages() {
  {{ if not .dependencies.evince -}} wait_for_apt && sudo apt -y purge "evince*" {{- end }}
  {{ if not .dependencies.geary -}} wait_for_apt && sudo apt -y purge geary {{- end }}
  {{ if not .dependencies.libreoffice -}} wait_for_apt && sudo apt -y purge "libreoffice*" {{- end }}
  {{ if not .dependencies.simple_scanner -}} wait_for_apt && sudo apt -y purge simple-scan {{- end }}
  {{ if not .dependencies.totem -}} wait_for_apt && sudo apt -y purge "totem*" {{- end }}
}

function remove_packages() {
  remove_flatpak
  remove_default_packages
}

# ****************************************************************************
# *                           Manual Installations                           *
# ****************************************************************************


function install_alacritty() {
  {{ if lookPath "alacritty" }}
    true
  {{ else }}
    local cmd
    local url
    local debfile
    local tempdir
    cmd='curl -fsSL'
    url='https://api.github.com/repos/barnumbirr/alacritty-debian/releases/latest'
    debfile="$(mktemp)"
    tempdir="$(mktemp -d)"
    if [ -n "$GITHUB_TOKEN" ]; then
      cmd="$cmd --header 'Authorization: token $GITHUB_TOKEN'"
    fi
    eval "$cmd $url" | grep 'browser_' | cut -d\" -f4 | grep "amd64_unstable" | xargs curl -s -L --output "$debfile"
    cd "$tempdir" || return
    sudo dpkg -i "$debfile"
    sudo apt-mark hold alacritty
    rm "$debfile"
    rm -rf "$tempdir"
    cd - || return
  {{ end }}
}

function install_asdf() {
  {{ if .asdf.enabled }}
    ! command -v asdf &>/dev/null || return 0
    git clone https://github.com/asdf-vm/asdf.git {{ .chezmoi.homeDir -}}/.asdf --branch master || true
  {{ else }}
    true
  {{ end }}
}


# ****************************************************************************
# *                                   PPAs                                   *
# ****************************************************************************

function add_ppa_docker() {
  {{ if .dependencies.docker }}
    ! command -v docker &>/dev/null || return 0
    curl -fsSL 'https://download.docker.com/linux/ubuntu/gpg' | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  {{ else }}
    true
  {{ end }}
}

# ****************************************************************************
# *                     APT Package Manager Installations                    *
# ****************************************************************************

function install_packages() {
  local packages=(

    at
    bfs
    cmake
    entr
    gnupg
    libboost-dev
    libevdev-dev
    libnotify-bin
    libudev-dev
    libyaml-cpp-dev
    pcscd
    scdaemon
    tmux
    tree

    {{ if .asdf.enabled }}

    {{ if .asdf.golang }}
    coreutils
    {{ end }}

    {{ if .asdf.python }}
    build-essential
    libbz2-dev
    libffi-dev
    liblzma-dev
    libncurses-dev
    libreadline-dev
    libsqlite3-dev
    libssl-dev
    libxml2-dev
    libxmlsec1-dev
    llvm
    make
    tk-dev
    xz-utils
    zlib1g-dev
    {{ end }}

    {{ if .asdf.ruby }}
    autoconf
    bison
    build-essential
    libdb-dev
    libffi-dev
    libgdbm-dev
    libgdbm6
    libncurses-dev
    libpq-dev
    libreadline-dev
    libssl-dev
    libyaml-dev
    rustc
    zlib1g-dev
    {{ end }}

    {{ if .asdf.postgres }}
    build-essential
    icu-devtools
    libcurl4-openssl-dev
    libreadline-dev
    libssl-dev
    linux-headers-$(uname -r)
    uuid-dev
    zlib1g-dev
    {{ end }}

    {{ end }}

    {{ if .dependencies.docker }}
    docker-ce
    docker-ce-cli
    containerd.io
    docker-compose
    {{ end }}
  )

  add_ppa_docker

  wait_for_apt && sudo apt -y update
  wait_for_apt && sudo apt -y upgrade
  wait_for_apt && sudo apt -y install "${packages[@]}"
  wait_for_apt && sudo apt -y autoremove
  wait_for_apt && sudo apt -y autoclean

  install_alacritty
  install_asdf
}

# ****************************************************************************
# *                                Main Script                               *
# ****************************************************************************

remove_packages
install_packages

{{ end }}
